#!/usr/bin/env bash

set -euo pipefail
IFS=$"\n\t"

usage() {
  cat <<EOF
usage: compendium [-h] [-V]
                  init [-c COMMAND] [-i FILE] <list>
                  get [-f] <list>

options:
  -h		Print this help text and exit
  -V		Print program version and exit
  -c COMMAND	Use the specified command-line when calling YouTube-dl
  -i FILE	File containing video IDs to use as a reference
  -f		Force (re-)downloading content

examples:

  compendium init -c "-o '%(title)s.%(ext)s' -f bestaudio --extract-audio --audio-format mp3" PL...

  compendium get PL...
EOF
}

die() {
  local err="${1:-something went wrong}"
  echo "compendium:" "$err"
  exit 1
}

lock() {
  local file="$HOME/.compendium/lock"
  exec 3>"$file"
  trap 'exec 3>&-' EXIT
  flock -xn 3 || die "could not acquire lock file '$file'."
}

init() {
  local cmd
  local file
  local cache
  local OPTIND
  while getopts ":c:i:" opt; do
    case "$opt" in
      c)
        cmd="$OPTARG"
        ;;
      i)
        file="$OPTARG"
        ;;
      :)
        die "option '-$OPTARG' requires an argument. See 'compendium -h'."
        ;;
      \?)
        die "unknown option '-$OPTARG'. See 'compendium -h'."
        ;;
    esac
  done
  shift $((OPTIND - 1))
  [[ "$#" -ne 0 ]] || die "missing positional argument. See 'compendium -h'."
  lock
  cache="$HOME/.compendium/$1"
  if [[ -d "$cache" ]]; then
    echo "warning: reference exists. To continue would lead to its removal."
    while true; do
      read -r -p "Proceed init ? [Y/n] " ans
      case "$ans" in
        Y*)
          rm -r "$cache"
          break
          ;;
        "")
          ;&
        n*)
          exit 0
          ;;
        *)
          echo "Please answer 'Yes' or 'no'."
          ;;
      esac
    done
  fi
  mkdir -p "$cache"
  xargs -n 1 <<< "${cmd:-}" > "$cache/cmd.txt"
  if [[ -z "${file:-}" ]]; then
    touch "$cache/list.txt"
  else
    install -m 0644 "$file" "$cache/list.txt"
  fi
}

get() {
  local cmd
  local tmp
  local batch
  local cache
  local force=0
  local OPTIND
  while getopts ":f" opt; do
    case "$opt" in
      f)
        force=1
        ;;
      \?)
        die "unknown option '-$OPTARG'. See 'compendium -h'."
        ;;
    esac
  done
  shift $((OPTIND - 1))
  [[ "$#" -ne 0 ]] || die "missing positional argument. See 'compendium -h'."
  lock
  cache="$HOME/.compendium/$1"
  [[ -d "$cache" ]] || die "missing reference, please init. See 'compendium -h'."
  tmp=$(mktemp -d -t compendium-XXXXXXXXXXXX)
  # shellcheck disable=SC2064
  trap "rm -r '$tmp'" EXIT
  mapfile -t cmd < "$cache/cmd.txt"
  youtube-dl -j --flat-playlist "$1" | jq -r '.id' | sort > "$tmp/list.txt"
  comm -13 "$cache/list.txt" "$tmp/list.txt" > "$tmp/batch.txt"
  [[ "$force" -ne 0 ]] && batch="$tmp/list.txt" || batch="$tmp/batch.txt"
  [[ -s "$batch" ]] || { echo "Up-to-date."; exit 0; }
  youtube-dl "${cmd[@]}" --batch-file "$batch"
  install -m 0644 "$tmp/list.txt" "$cache/list.txt"
}

main() {
  local cache
  local OPTIND
  while getopts ":hV" opt; do
    case "$opt" in
      h)
        usage
        exit 0
        ;;
      V)
        echo "1.0"
        exit 0
        ;;
      *)
        ;;
    esac
  done
  shift $((OPTIND - 1))
  [[ "$#" -ne 0 ]] || die "missing command. See 'compendium -h'."
  [[ "$1" =~ ^(init|get)$ ]] || die "'$1' is not a compendium command. See 'compendium -h'."
  mkdir -p "$HOME/.compendium"
  "$@"
}

main "$@"
